class Trie {
public:
    
    class Node {
    public:
        Node *leaf[26];
        bool end;
        Node() {
            for (int i=0;i<26;++i) leaf[i] = NULL;
            end = false;
        }
    }*root;
    
    Trie() {
        root = new Node();
        return;
    }
    
    void insert(string word) {
        int idx = 0;
        Node *cur = root;
        while (word[idx]) {
            int c = word[idx++]-'a';
            if (cur->leaf[c]==NULL) cur->leaf[c] = new Node();
            cur = cur->leaf[c];
        }
        cur->end = true;
    }
    
    bool search(string word) {
        int idx = 0, ended = 0;
        Node *cur = root;
        while (word[idx]) {
            int c = word[idx++]-'a';
            if (cur->leaf[c]==NULL) return false;
            cur = cur->leaf[c];
            ended = cur->end;
        }
        return ended;
    }
    
    bool startsWith(string prefix) {
        int idx = 0;
        Node *cur = root;
        while (prefix[idx]) {
            int c = prefix[idx++]-'a';
            if (cur->leaf[c]==NULL) return false;
            cur = cur->leaf[c];
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
